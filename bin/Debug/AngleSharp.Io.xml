<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AngleSharp.Io</name>
    </assembly>
    <members>
        <member name="T:AngleSharp.IoConfigurationExtensions">
            <summary>
            Additional extensions for improved requesters.
            </summary>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithRequesters(AngleSharp.IConfiguration,System.Action{AngleSharp.ConfigurationExtensions.LoaderSetup})">
            <summary>
            Adds a loader service that comes with all (improved) requesters.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="setup">Optional setup for the loader service.</param>
            <returns>The new configuration.</returns>
        </member>
        <member name="M:AngleSharp.IoConfigurationExtensions.WithRequesters(AngleSharp.IConfiguration,System.Net.Http.HttpMessageHandler,System.Action{AngleSharp.ConfigurationExtensions.LoaderSetup})">
            <summary>
            Adds a loader service that comes with all (improved) requesters.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="httpMessageHandler">
            The HTTP handler stack to use for sending requests.
            </param>
            <param name="setup">Optional setup for the loader service.</param>
            <returns>The new configuration.</returns>
        </member>
        <member name="T:AngleSharp.Io.Dom.WebSocketReadyState">
            <summary>
            Represents the state of the connection.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocketReadyState.Connecting">
            <summary>
            The connection has not yet been established.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocketReadyState.Open">
            <summary>
            The connection is established and communication is possible.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocketReadyState.Closing">
            <summary>
            The connection is going through the closing handshake.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocketReadyState.Closed">
            <summary>
            The connection has been closed or could not be opened.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Dom.WebSocket">
            <summary>
            Represents the WebSocket interface. For more information see:
            http://www.w3.org/TR/2011/WD-websockets-20110419/#the-websocket-interface
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocket.OpenEvent">
            <summary>
            The open event name.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.Dom.WebSocket.CloseEvent">
            <summary>
            The close event name.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.Dom.WebSocket.Opened">
            <summary>
            Adds or removes the handler for the open event.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.Dom.WebSocket.Message">
            <summary>
            Adds or removes the handler for the message event.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.Dom.WebSocket.Error">
            <summary>
            Adds or removes the handler for the error event.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.Dom.WebSocket.Closed">
            <summary>
            Adds or removes the handler for the close event.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.WebSocket.#ctor(AngleSharp.Dom.IWindow,System.String,System.String[])">
            <summary>
            Creates a new WebSocket instance.
            </summary>
            <param name="window">The parent context.</param>
            <param name="url">The URL to connect to.</param>
            <param name="protocols">The protocols to allow.</param>
        </member>
        <member name="P:AngleSharp.Io.Dom.WebSocket.Url">
            <summary>
            Gets the URL the connection is made to.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.WebSocket.ReadyState">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.WebSocket.Buffered">
            <summary>
            Gets the number of bytes of UTF-8 text that have been queued using
            Send() but that, as of the last time the event loop started
            executing a task, had not yet been transmitted to the network.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.WebSocket.Protocol">
            <summary>
            Gets the chosen protocol for the connection.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.WebSocket.Send(System.String)">
            <summary>
            Transmits data using the connection.
            </summary>
            <param name="data">The data to transmit.</param>
        </member>
        <member name="M:AngleSharp.Io.Dom.WebSocket.Close">
            <summary>
            Closes the WebSocket connection, if open. Otherwise aborts.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Dom.IStorage">
            <summary>
            Represents the Storage interface. For more information see:
            http://www.w3.org/TR/webstorage/#the-storage-interface
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.IStorage.Length">
            <summary>
            Gets the number of stored keys.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.IStorage.Key(System.Int32)">
            <summary>
            Gets the key at the given index, if any.
            </summary>
            <param name="index">The index of the key.</param>
            <returns>The key or null.</returns>
        </member>
        <member name="P:AngleSharp.Io.Dom.IStorage.Item(System.String)">
            <summary>
            Gets or sets the item's value.
            </summary>
            <param name="key">The key of the item.</param>
            <returns>The value if any.</returns>
        </member>
        <member name="M:AngleSharp.Io.Dom.IStorage.Remove(System.String)">
            <summary>
            Removes the item with the specified key.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:AngleSharp.Io.Dom.IStorage.Clear">
            <summary>
            Clears all items from the storage.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Extensions.GeneralExtensions">
            <summary>
            Some general extension methods.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Extensions.GeneralExtensions.Stringify(AngleSharp.Network.HttpMethod)">
            <summary>
            Returns the string representation for the specified HTTP method.
            </summary>
            <param name="method">The type of HTTP method to stringify.</param>
            <returns>The string representing the HTTP method.</returns>
        </member>
        <member name="M:AngleSharp.Io.Extensions.GeneralExtensions.Forget(System.Threading.Tasks.Task)">
            <summary>
            Forgets the given task. Exceptions are ignored and continuations
            are pointless.
            </summary>
            <param name="task">The task to forget after firing.</param>
        </member>
        <member name="T:AngleSharp.Io.Network.AboutRequester">
            <summary>
            Requester to perform about:// requests.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.#ctor">
            <summary>
            Creates a new about requester.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.SetRoute(System.String,System.Func{AngleSharp.Network.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{AngleSharp.Network.IResponse}})">
            <summary>
            Sets the route for the given address.
            </summary>
            <param name="address">The address of the route.</param>
            <param name="route">The route to use.</param>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.GetRoute(System.String)">
            <summary>
            Gets the route for the given address, if any.
            </summary>
            <param name="address">The address of the route to obtain.</param>
            <returns>The route, if any.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.RequestAsync(AngleSharp.Network.IRequest,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>The task that will eventually give the response data.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.AboutRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">The protocol to check for, e.g. file.</param>
            <returns>True if the protocol is supported, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Io.Network.FileRequester">
            <summary>
            Requester to perform file:// requests.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.FileRequester.RequestAsync(AngleSharp.Network.IRequest,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>The task that will eventually give the response data.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.FileRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">The protocol to check for, e.g. file.</param>
            <returns>True if the protocol is supported, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Io.Network.FtpRequester">
            <summary>
            Requester to perform ftp:// requests.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.FtpRequester.RequestAsync(AngleSharp.Network.IRequest,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>The task that will eventually give the response data.</returns>
        </member>
        <member name="M:AngleSharp.Io.Network.FtpRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">The protocol to check for, e.g. ftp.</param>
            <returns>True if the protocol is supported, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Io.Network.HttpClientRequester">
            <summary>
            An HTTP requester based on <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.HttpClientRequester.#ctor">
            <summary>
            Creates a new HTTP client request with a new HttpClient instance.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Network.HttpClientRequester.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Creates a new HTTP client request.
            </summary>
            <param name="client">The HTTP client to use for requests.</param>
        </member>
        <member name="M:AngleSharp.Io.Network.HttpClientRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">
            The protocol to check for, e.g., http.
            </param>
            <returns>
            True if the protocol is supported, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.Network.HttpClientRequester.RequestAsync(AngleSharp.Network.IRequest,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>
            The task that will eventually give the response data.
            </returns>
        </member>
    </members>
</doc>
